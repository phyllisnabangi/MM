# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ilwHaDuJlTRWd9-H9SPPbdluCCAmTXjv
"""

# app.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go

@st.cache_data
def load_data():
    # Load every sheet, rename typos, tag with sheet name
    xls = pd.read_excel("detaileddata.xlsx", sheet_name=None)
    frames = []
    for sheet, df in xls.items():
        df = df.copy()
        if "Traget" in df.columns:
            df = df.rename(columns={"Traget": "Target"})
        df["Stakeholder"] = sheet
        # keep only expected cols
        frames.append(df[["Division", "Name", "Target", "Actual", "Stakeholder"]])
    full = pd.concat(frames, ignore_index=True)
    # ensure ints
    full["Target"] = full["Target"].astype(int)
    full["Actual"] = full["Actual"].astype(int)
    full["Performance"] = full["Actual"] / full["Target"] * 100
    return full

df = load_data()

st.sidebar.header("Filters")
division = st.sidebar.selectbox("Division", sorted(df["Division"].unique()))
stakeholder = st.sidebar.selectbox(
    "Stakeholder",
    sorted(df[df["Division"] == division]["Stakeholder"].unique()),
)

st.title(f"{division} â†’ {stakeholder} Dashboard")

# Filtered subset
sub = df[(df["Division"] == division) & (df["Stakeholder"] == stakeholder)]

# 1) Performance bar
total_t = sub["Target"].sum()
total_a = sub["Actual"].sum()
perf = (total_a / total_t * 100) if total_t else 0
color = "green" if perf >= 100 else "orange" if perf >= 70 else "red"

fig = go.Figure(
    go.Bar(
        x=[stakeholder],
        y=[perf],
        marker_color=[color],
        text=[f"{perf:.1f}%"],
        textposition="auto",
    )
)
fig.update_layout(
    yaxis_title="Performance %",
    yaxis=dict(range=[0, max(110, perf + 10)], ticksuffix="%"),
    margin=dict(t=50, b=50),
)
st.plotly_chart(fig, use_container_width=True)

# 2) Detailed table
st.header("Detail: Names Under Stakeholder")
st.dataframe(
    sub[["Name", "Target", "Actual"]]
    .assign(**{"Performance %": sub["Performance"].round(1).astype(str) + "%"}),
    use_container_width=True,
)