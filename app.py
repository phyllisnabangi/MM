# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ilwHaDuJlTRWd9-H9SPPbdluCCAmTXjv
"""

# app.py
import streamlit as st
import pandas as pd

st.set_page_config(layout="wide")

@st.cache_data
def load_data():
    # 1) Read all sheets
    xls = pd.read_excel("detaileddata.xlsx", sheet_name=None)

    frames = []
    for stakeholder, df in xls.items():
        tmp = df.copy()
        # Rename typo’d column if needed
        if "Traget" in tmp.columns:
            tmp = tmp.rename(columns={"Traget": "Target"})
        tmp["Stakeholder"] = stakeholder
        frames.append(tmp[["Division","Name","Target","Actual","Stakeholder"]])
    full = pd.concat(frames, ignore_index=True)

    # 2) Clean and convert to integers
    full["Target"] = full["Target"].fillna(0).astype(int)
    full["Actual"] = full["Actual"].fillna(0).astype(int)
    full["Performance"] = full["Actual"] / full["Target"] * 100
    return full

df = load_data()

# ─── Sidebar filters ───────────────────────────────────────────────────
st.sidebar.header("Filters")
division = st.sidebar.selectbox("Division", sorted(df["Division"].unique()))
stake_opts = sorted(df[df["Division"]==division]["Stakeholder"].unique())
stakeholder = st.sidebar.selectbox("Stakeholder", stake_opts)

# ─── Title ─────────────────────────────────────────────────────────────
st.title(f"{division} → {stakeholder} Dashboard")

# ─── Filtered subset ───────────────────────────────────────────────────
sub = df[(df["Division"]==division) & (df["Stakeholder"]==stakeholder)]

if sub.empty:
    st.warning("No data for that Division / Stakeholder combination.")
    st.stop()

# ─── 1) Aggregated performance table ───────────────────────────────────
agg = (
    sub.groupby("Stakeholder")[["Target","Actual"]]
       .sum()
       .assign(Performance=lambda d: d.Actual/d.Target*100)
       .reset_index()
)

# Color map function
def color_performance(val):
    if val >= 100:
        return "background-color: lightgreen"
    if val >= 70:
        return "background-color: lightgoldenrodyellow"
    return "background-color: lightcoral"

st.subheader("Aggregated Performance")
# Use st.write to render a styled DataFrame
styled = (
    agg.style
       .format({"Performance": "{:.2f}%"})
       .applymap(color_performance, subset=["Performance"])
)
st.write(styled, unsafe_allow_html=True)

# ─── 2) Detailed breakdown table ────────────────────────────────────────
st.subheader("Detail: Items Under Stakeholder")
detail = (
    sub[["Name","Target","Actual"]]
       .assign(**{"Performance %": sub["Performance"].round(1).astype(str)+"%"})
       .rename(columns={"Name":"Item"})
)
st.dataframe(detail, use_container_width=True)
